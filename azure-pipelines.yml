# Download release packages from lastest id-dast build
# Publish to distribution releases

resources:
  pipelines:
  - pipeline: VantagePrevent  # Name of the pipeline resource
    source: vantage-prevent  # Name of the pipeline referenced by the pipeline resource

jobs:
- job: Publish
  pool:
    vmImage: ubuntu-latest
  variables:
    imageName: 'whsinnovations/vantage-prevent-api'
  steps:
    - download: VantagePrevent
      artifact: linux
      patterns: "*.deb"
      displayName: 'Download VantagePrevent Debian Artifact'
    - download: VantagePrevent
      artifact: darwin
      patterns: "*.pkg"
      displayName: 'Download VantagePrevent macOS Artifact'
    - download: VantagePrevent
      artifact: windows
      patterns: "*.msi"
      displayName: 'Download VantagePrevent Windows Artifact'
    - bash: |
        thisFile=$(ls *.deb | head -1)
        GIT_TAG=$(dpkg --info $thisFile | grep 'Version:' | sed 's/\WVersion:\W/v/g')
        echo "##vso[task.setvariable variable=GIT_TAG]$GIT_TAG"
        echo "Tag is ${GIT_TAG}"
      workingDirectory: $(Pipeline.Workspace)/VantagePrevent/linux
      displayName: 'Generate Tag'
    - task: GitHubRelease@1
      displayName: 'Push to Release folder'
      inputs:
        gitHubConnection: github.com
        repositoryName: whitehatsec/vantage-prevent-distributions
        action: create
        tagSource: userSpecifiedTag
        target: $(Build.SourceVersion)
        tag: $(GIT_TAG)
        title: Release $(GIT_TAG)
        addChangeLog: false
        isPreRelease: false
        assetUploadMode: replace
        assets: |
          $(Pipeline.Workspace)/VantagePrevent/darwin/*
          $(Pipeline.Workspace)/VantagePrevent/linux/*
          $(Pipeline.Workspace)/VantagePrevent/windows/*
    - bash: |
        mkdir -p ./dist/docker
        cp $(Pipeline.Workspace)/VantagePrevent/linux/VantagePrevent-Ubuntu-20_04.deb ./dist/docker
        docker build -t $(imageName):${GIT_TAG} -t $(imageName):latest --build-arg DEB_NAME=VantagePrevent-Ubuntu-20_04.deb --no-cache -f ./docker/Ubuntu-20_04.Dockerfile dist/docker
      displayName: 'Build Docker Image'
      timeoutInMinutes: 90
    - task: Docker@2
      displayName: 'Login to Docker Hub'
      inputs:
        command: login
        containerRegistry: dockerhub
    - task: Docker@2
      displayName: 'Push image to Docker Hub'
      inputs:
        command: push
        containerRegistry: dockerhub
        repository: $(imageName)
        tags: |
          latest
          $(release_version)
